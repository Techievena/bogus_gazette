{"version":3,"sources":["AppNavbar.js","storehash.js","Home.js","App.js","serviceWorker.js","index.js","ipfs.js","logo.svg","Upload.js","Read.js","web3.js"],"names":["AppNavbar","props","_this","Object","_Users_abinash_Open_Source_bogus_gazette_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_super","call","state","isOpen","toggle","bind","_Users_abinash_Open_Source_bogus_gazette_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__","setState","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_7__","color","dark","expand","tag","Link","to","onClick","navbar","className","href","Component","_web3__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","__webpack_exports__","web3","eth","Contract","constant","inputs","name","type","outputs","payable","stateMutability","Home","react_default","reactstrap_es","fluid","App","BrowserRouter","Switch","Route","path","exact","component","Read","Upload","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","protocol","module","exports","p","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","_callee","_Users_abinash_Open_Source_bogus_gazette_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","wrap","_context","prev","next","Buffer","from","result","sent","stop","_callee2","_context2","getTransactionReceipt","err","console","log","t0","onSubmit","_callee3","accounts","_context3","getAccounts","storehash","options","address","add","hash","methods","sendHash","send","error","react__WEBPACK_IMPORTED_MODULE_8___default","_AppNavbar__WEBPACK_IMPORTED_MODULE_9__","onChange","bordered","responsive","left","top","object","data-src","logo","alt","body","heading","middle","bottom","web3__WEBPACK_IMPORTED_MODULE_0__","n","Web3","currentProvider"],"mappings":"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","file":"static/js/main.44e0bb5f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nexport default class AppNavbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {isOpen: false};\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return <Navbar color=\"dark\" dark expand=\"md\">\n      <NavbarBrand tag={Link} to=\"/\">Bogus Gazette</NavbarBrand>\n      <NavbarToggler onClick={this.toggle}/>\n      <Collapse isOpen={this.state.isOpen} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink\n              href=\"https://github.com/Techievena\">@Techievena</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              href=\"https://github.com/mr-yamraj\">@mr-yamraj</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://github.com/Techievena/bogus_gazette\">GitHub</NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </Navbar>;\n  }\n}","import web3 from './web3';\n\n//access our local copy to contract deployed on rinkeby testnet\n//use your own contract address\n\nconst address = '0xbbf289d846208c16edc8474705c748aff07732db';\n\n//use the ABI from your contract\n\nconst abi = [\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"x\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"sendHash\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"getHash\",\n    \"outputs\": [\n      {\n        \"name\": \"x\",\n        \"type\": \"string\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n]\n\nexport default new web3.eth.Contract(abi, address);","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\nimport { Button, Container, Row, Col } from 'reactstrap';\n\nclass Home extends Component {\n\n    render() {\n    return (\n      <div className=\"App\">\n        <AppNavbar/>\n        <Container fluid>\n          <Row className=\"text-center\">\n          <Col>\n            <Button color=\"primary\" className=\"px-4\" tag={Link} to=\"/reader\">Read News</Button>\n          </Col>\n          <Col>\n            <Button color=\"primary\" className=\"px-4\" tag={Link} to=\"/journalist\">Upload News</Button>\n          </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport Upload from './Upload';\nimport Read from './Read';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path='/' exact={true} component={Home}/>\n          <Route path='/reader' exact={true} component={Read}/>\n          <Route path='/journalist' exact={true} component={Upload}/>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n/*https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-a-stylesheet*/\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","//using the infura.io node, otherwise ipfs requires you to run a daemon on your own computer/server. See IPFS.io docs\n// const IPFS = require('ipfs-api');\n// const ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n\n//run with local daemon\nconst ipfsApi = require('ipfs-api');\nconst ipfs = new ipfsApi('localhost', '5001', {protocol: 'https'});\n\nexport default ipfs;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport { Table, Container, Button, Form } from 'reactstrap';\nimport React, { Component } from 'react';\n// import logo from './logo.svg';\nimport AppNavbar from './AppNavbar';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass Upload extends Component {\n\n    state = {\n      ipfsHash:null,\n      buffer:'',\n      ethAddress:'',\n      blockNumber:'',\n      transactionHash:'',\n      gasUsed:'',\n      txReceipt: ''\n    };\n\n    captureFile =(event) => {\n        event.stopPropagation()\n        event.preventDefault()\n        const file = event.target.files[0]\n        let reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => this.convertToBuffer(reader)\n      };\n\n    convertToBuffer = async(reader) => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    };\n\n    onClick = async () => {\n\n    try{\n        this.setState({blockNumber:\"waiting..\"});\n        this.setState({gasUsed:\"waiting...\"});\n\n        // get Transaction Receipt in console on click\n        // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n          console.log(err,txReceipt);\n          this.setState({txReceipt});\n        }); //await for getTransactionReceipt\n\n        await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n        await this.setState({gasUsed: this.state.txReceipt.gasUsed});\n      } //try\n    catch(error){\n        console.log(error);\n      } //catch\n  } //onClick\n\n    onSubmit = async (event) => {\n      event.preventDefault();\n\n      //bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n     \n      console.log('Sending from Metamask account: ' + accounts[0]);\n\n      //obtain contract address from storehash.js\n      const ethAddress= await storehash.options.address;\n      this.setState({ethAddress});\n\n      //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash \n        this.setState({ ipfsHash:ipfsHash[0].hash });\n\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n        storehash.methods.sendHash(this.state.ipfsHash).send({\n          from: accounts[0] \n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({transactionHash});\n        }); //storehash \n      }) //await ipfs.add \n    }; //onSubmit\n\n    render() {\n      \n      return (\n        <div className=\"App\">\n          <AppNavbar/>\n\n          <hr />\n\n        <Container>\n          <h3> Choose file to send to IPFS </h3>\n          <Form onSubmit={this.onSubmit}>\n            <input \n              type = \"file\"\n              onChange = {this.captureFile}\n            />\n             <Button \n             color=\"primary\" \n             type=\"submit\"> \n             Send it \n             </Button>\n          </Form>\n\n          <hr/>\n            <Button onClick = {this.onClick}> Get Transaction Receipt </Button>\n\n              <Table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n               \n                <tbody>\n                  <tr>\n                    <td>IPFS Hash # stored on Eth Contract</td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td>{this.state.ethAddress}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Tx Hash # </td>\n                    <td>{this.state.transactionHash}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Block Number # </td>\n                    <td>{this.state.blockNumber}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Gas Used</td>\n                    <td>{this.state.gasUsed}</td>\n                  </tr>\n                </tbody>\n            </Table>\n        </Container>\n     </div>\n      );\n    } //render\n}\n\nexport default Upload;","\nimport { Table, Container, Button, Media } from 'reactstrap';\nimport React, { Component } from 'react';\n// import logo from './logo.svg';\nimport AppNavbar from './AppNavbar';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport logo from './logo.svg';\n\nclass Read extends Component {\n\n    state = {\n      ipfsHash:null,\n      buffer:'',\n      ethAddress:'',\n      blockNumber:'',\n      transactionHash:'',\n      gasUsed:'',\n      txReceipt: ''\n    };\n\n    captureFile =(event) => {\n        event.stopPropagation()\n        event.preventDefault()\n        const file = event.target.files[0]\n        let reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => this.convertToBuffer(reader)\n      };\n\n    convertToBuffer = async(reader) => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    };\n\n    onClick = async () => {\n\n    try{\n        this.setState({blockNumber:\"waiting..\"});\n        this.setState({gasUsed:\"waiting...\"});\n\n        // get Transaction Receipt in console on click\n        // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n          console.log(err,txReceipt);\n          this.setState({txReceipt});\n        }); //await for getTransactionReceipt\n\n        await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n        await this.setState({gasUsed: this.state.txReceipt.gasUsed});\n      } //try\n    catch(error){\n        console.log(error);\n      } //catch\n  } //onClick\n\n    onSubmit = async (event) => {\n      event.preventDefault();\n\n      //bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n     \n      console.log('Sending from Metamask account: ' + accounts[0]);\n\n      //obtain contract address from storehash.js\n      const ethAddress= await storehash.options.address;\n      this.setState({ethAddress});\n\n      //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash \n        this.setState({ ipfsHash:ipfsHash[0].hash });\n\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n        storehash.methods.sendHash(this.state.ipfsHash).send({\n          from: accounts[0] \n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({transactionHash});\n        }); //storehash \n      }) //await ipfs.add \n    }; //onSubmit\n\n    render() {\n      \n      return (\n        <div className=\"App\">\n          <AppNavbar/>\n\n          <hr />\n\n        <Container>\n          <h3> Top Headlines </h3>\n\n          <hr/>\n          <Media>\n        <Media left top href=\"#\">\n          <Media object data-src={logo} alt=\"Generic placeholder image\" />\n        </Media>\n        <Media body>\n          <Media heading>\n            News #1\n          </Media>\n          Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\n        </Media>\n      </Media>\n      <hr/>\n      <Media className=\"mt-1\">\n        <Media left middle href=\"#\">\n          <Media object data-src={logo} alt=\"Generic placeholder image\" />\n        </Media>\n        <Media body>\n          <Media heading>\n            News #2\n          </Media>\n          Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\n        </Media>\n      </Media>\n      <hr/>\n      <Media className=\"mt-1\">\n        <Media left bottom href=\"#\">\n          <Media object data-src={logo} alt=\"Generic placeholder image\" />\n        </Media>\n        <Media body>\n          <Media heading>\n            News #3\n          </Media>\n          Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\n        </Media>\n      </Media>\n          <hr/>\n            <Button onClick = {this.onClick}> Get Source </Button>\n\n              <Table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n               \n                <tbody>\n                  <tr>\n                    <td>IPFS Hash # stored on Eth Contract</td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td>{this.state.ethAddress}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Tx Hash # </td>\n                    <td>{this.state.transactionHash}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Block Number # </td>\n                    <td>{this.state.blockNumber}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Gas Used</td>\n                    <td>{this.state.gasUsed}</td>\n                  </tr>\n                </tbody>\n            </Table>\n        </Container>\n     </div>\n      );\n    } //render\n}\n\nexport default Read;","// //overrides metamask v0.2 for our 1.0 version.  \n//1.0 lets us use async and await instead of promises\n\nimport Web3 from 'web3';\n//overrides metamask v0.2 for our v 1.0\nconst web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;"],"sourceRoot":""}